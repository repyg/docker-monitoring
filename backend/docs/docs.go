// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Mikhail Gunin",
            "url": "https://github.com/repyg",
            "email": "repyg@yandex.ru"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/container_status": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a list of containers with optional filtering by various parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Retrieve a list of containers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by container ID",
                        "name": "container_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by IP",
                        "name": "ip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Filter by minimum ping time",
                        "name": "ping_time_min",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Filter by maximum ping time",
                        "name": "ping_time_max",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by creation date (greater than or equal to), format: RFC3339",
                        "name": "created_at_gte",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by creation date (less than or equal to), format: RFC3339",
                        "name": "created_at_lte",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by last update date (greater than or equal to), format: RFC3339",
                        "name": "updated_at_gte",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by last update date (less than or equal to), format: RFC3339",
                        "name": "updated_at_lte",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit the number of returned records",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.GetContainerStatusResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Adds a new container to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Create a new container",
                "parameters": [
                    {
                        "description": "Container data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateContainerStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.GetContainerStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/container_status/{container_id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a container from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Delete container by container ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "container_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Partially updates a container by its container ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Update container by container ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "container_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateContainerStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreateContainerStatusRequest": {
            "type": "object",
            "required": [
                "container_id",
                "ip_address",
                "last_successful_ping",
                "status"
            ],
            "properties": {
                "container_id": {
                    "type": "string"
                },
                "ip_address": {
                    "type": "string"
                },
                "last_successful_ping": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ping_time": {
                    "type": "number"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "created",
                        "restarting",
                        "running",
                        "removing",
                        "paused",
                        "exited",
                        "dead"
                    ]
                }
            }
        },
        "dto.GetContainerStatusResponse": {
            "type": "object",
            "properties": {
                "container_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "ip_address": {
                    "type": "string"
                },
                "last_successful_ping": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ping_time": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateContainerStatusRequest": {
            "type": "object",
            "properties": {
                "last_successful_ping": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ping_time": {
                    "type": "number"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "created",
                        "restarting",
                        "running",
                        "removing",
                        "paused",
                        "exited",
                        "dead"
                    ]
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-Api-Key",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.2",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Docker Monitoring API",
	Description:      "REST API for monitoring Docker containers.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
