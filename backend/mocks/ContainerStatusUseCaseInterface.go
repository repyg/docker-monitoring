// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/repyg/DockerMonitoringApp/backend/internal/application/dto"
	mock "github.com/stretchr/testify/mock"
)

// ContainerStatusUseCaseInterface is an autogenerated mock type for the ContainerStatusUseCaseInterface type
type ContainerStatusUseCaseInterface struct {
	mock.Mock
}

// CreateContainerStatus provides a mock function with given fields: statusDTO
func (_m *ContainerStatusUseCaseInterface) CreateContainerStatus(statusDTO *dto.ContainerStatusDTO) (*dto.ContainerStatusDTO, error) {
	ret := _m.Called(statusDTO)

	if len(ret) == 0 {
		panic("no return value specified for CreateContainerStatus")
	}

	var r0 *dto.ContainerStatusDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto.ContainerStatusDTO) (*dto.ContainerStatusDTO, error)); ok {
		return rf(statusDTO)
	}
	if rf, ok := ret.Get(0).(func(*dto.ContainerStatusDTO) *dto.ContainerStatusDTO); ok {
		r0 = rf(statusDTO)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ContainerStatusDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*dto.ContainerStatusDTO) error); ok {
		r1 = rf(statusDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContainerStatusByContainerID provides a mock function with given fields: containerID
func (_m *ContainerStatusUseCaseInterface) DeleteContainerStatusByContainerID(containerID string) error {
	ret := _m.Called(containerID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContainerStatusByContainerID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(containerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindContainerStatuses provides a mock function with given fields: filter
func (_m *ContainerStatusUseCaseInterface) FindContainerStatuses(filter *dto.ContainerStatusFilter) ([]*dto.ContainerStatusDTO, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for FindContainerStatuses")
	}

	var r0 []*dto.ContainerStatusDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto.ContainerStatusFilter) ([]*dto.ContainerStatusDTO, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(*dto.ContainerStatusFilter) []*dto.ContainerStatusDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.ContainerStatusDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*dto.ContainerStatusFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContainerStatus provides a mock function with given fields: containerID, statusDTO
func (_m *ContainerStatusUseCaseInterface) UpdateContainerStatus(containerID string, statusDTO *dto.ContainerStatusDTO) error {
	ret := _m.Called(containerID, statusDTO)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContainerStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *dto.ContainerStatusDTO) error); ok {
		r0 = rf(containerID, statusDTO)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewContainerStatusUseCaseInterface creates a new instance of ContainerStatusUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContainerStatusUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContainerStatusUseCaseInterface {
	mock := &ContainerStatusUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
